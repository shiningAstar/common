

dir_obj_release = obj/release/src
dir_bin_release = bin/release
dir_obj_debug = obj/debug/src
dir_bin_debug = bin/debug

vpath %.cpp src/


none_objects = main.o File.o logBase.o logTerminal.o logFile.o ControlwithLog.o \
					logControl.o log.o MySocket.o MutexLock.o ConfigBase.o FileConfig.o \
					SemaphorePV.o Thread.o SharedMemory.o  Crc.o FuncPtrMap.o BlockingInterruptor.o \
					Error.o

objects_release = $(foreach file, $(none_objects), $(patsubst %.o, %_release.o, $(file)))
objects_debug = $(foreach file, $(none_objects), $(patsubst %.o, %_debug.o, $(file)))

obj_files_release = $(foreach file, $(objects_release),$(dir_obj_release)/$(file))
obj_files_debug = $(foreach file, $(objects_debug),$(dir_obj_debug)/$(file))

h_export = logBase.h logFile.h logTerminal.h File.h ControlwithLog.h logControl.h log.h MySocket.h MutexLock.h \
			ConfigBase.h FileConfig.h SemaphorePV.h Thread.h Error.h SharedMemory.h BlockingInterruptor.h \
			NorMap.h List.h Crc.h base.h FuncPtrMap.h Que.h Error.h FuncPtrMap.h ListCircle.h Thread.h

h_export_file = $(foreach file, $(h_export), ./include/$(file))

compile_obj_release = g++ -Wall -O2 -fPIC -Iinclude -c
compile_obj_debug = g++ -Wall -fPIC -g -Iinclude -c

target_lib_name_release = $(dir_bin_release)/libcommon.so
target_lib_impname_release = $(dir_bin_release)/libcommon.a
target_lib_defname_release = $(dir_bin_release)/libcommon.def
target_lib_name_debug = $(dir_bin_debug)/libcommon.so
target_lib_impname_debug = $(dir_bin_debug)/libcommon.a
target_lib_defname_debug = $(dir_bin_debug)/libcommon.def

compile_lib = g++ -shared
flags_release =
flags_debug =

all : Debug Release

clean : cleanDebug cleanRelease

ReleaseCompile : ReleaseDir $(objects_release)
	$(compile_lib) $(flags_release) $(obj_files_release) -o $(target_lib_name_release) -s   -lpthread -lrt

Release : ReleaseCompile
	$(shell if [ -f '../create/include' ]; then echo "exist"; else mkdir -p '../create/include'; fi;)
	$(shell $(foreach file, $(h_export_file), cp $(file) ../create/include;))
	$(shell if [ -f '../create/bin/release' ]; then echo "exist"; else mkdir -p '../create/bin/release'; fi;)
	$(shell cp ./bin/release/*.* ../create/bin/release;)

DebugCompile : DebugDir $(objects_debug)
	$(compile_lib) $(flags_debug) $(obj_files_debug) -o $(target_lib_name_debug)  -lpthread -lrt

Debug : DebugCompile
	$(shell if [ -f '../create/include' ]; then echo "exist"; else mkdir -p '../create/include'; fi;)
	$(shell $(foreach file, $(h_export_file), cp $(file) ../create/include;))
	$(shell if [ -f '../create/bin/debug' ]; then echo "exist"; else mkdir -p '../create/bin/debug'; fi;)
	$(shell cp ./bin/debug/*.* ../create/bin/debug)

ReleaseDir :
	$(shell if [ -f $(dir_obj_release) ]; then echo "exist"; else mkdir -p $(dir_obj_release); fi;)
	$(shell if [ -f $(dir_bin_release) ]; then echo "exist"; else mkdir -p $(dir_bin_release); fi;)

DebugDir :
	$(shell if [ -f $(dir_obj_debug) ]; then echo "exist"; else mkdir -p $(dir_obj_debug); fi;)
	$(shell if [ -f $(dir_bin_debug) ]; then echo "exist"; else mkdir -p $(dir_bin_debug); fi;)

$(objects_release):%_release.o:%.cpp
	$(compile_obj_release) $(<) -o $(dir_obj_release)/$@

$(objects_debug):%_debug.o:%.cpp
	$(compile_obj_debug) $< -o $(dir_obj_debug)/$@

cleanRelease :
	rm -rf $(target_lib_name_release) $(target_lib_impname_release) $(target_lib_defname_release) $(obj_files_release)

cleanDebug :
	rm -rf $(target_lib_name_debug) $(target_lib_impname_debug) $(target_lib_defname_debug) $(obj_files_debug)
